// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto_logic/base_msg.proto

package proto_logicconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto_logic "mini_game_balance/internal/proto/gen/proto_logic"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BaseMsgCallName is the fully-qualified name of the BaseMsgCall service.
	BaseMsgCallName = "proto_logic.BaseMsgCall"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BaseMsgCallAddProcedure is the fully-qualified name of the BaseMsgCall's Add RPC.
	BaseMsgCallAddProcedure = "/proto_logic.BaseMsgCall/Add"
)

// BaseMsgCallClient is a client for the proto_logic.BaseMsgCall service.
type BaseMsgCallClient interface {
	Add(context.Context, *connect_go.Request[proto_logic.BaseMsg]) (*connect_go.Response[proto_logic.BaseMsg], error)
}

// NewBaseMsgCallClient constructs a client for the proto_logic.BaseMsgCall service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBaseMsgCallClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BaseMsgCallClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &baseMsgCallClient{
		add: connect_go.NewClient[proto_logic.BaseMsg, proto_logic.BaseMsg](
			httpClient,
			baseURL+BaseMsgCallAddProcedure,
			opts...,
		),
	}
}

// baseMsgCallClient implements BaseMsgCallClient.
type baseMsgCallClient struct {
	add *connect_go.Client[proto_logic.BaseMsg, proto_logic.BaseMsg]
}

// Add calls proto_logic.BaseMsgCall.Add.
func (c *baseMsgCallClient) Add(ctx context.Context, req *connect_go.Request[proto_logic.BaseMsg]) (*connect_go.Response[proto_logic.BaseMsg], error) {
	return c.add.CallUnary(ctx, req)
}

// BaseMsgCallHandler is an implementation of the proto_logic.BaseMsgCall service.
type BaseMsgCallHandler interface {
	Add(context.Context, *connect_go.Request[proto_logic.BaseMsg]) (*connect_go.Response[proto_logic.BaseMsg], error)
}

// NewBaseMsgCallHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBaseMsgCallHandler(svc BaseMsgCallHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	baseMsgCallAddHandler := connect_go.NewUnaryHandler(
		BaseMsgCallAddProcedure,
		svc.Add,
		opts...,
	)
	return "/proto_logic.BaseMsgCall/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BaseMsgCallAddProcedure:
			baseMsgCallAddHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBaseMsgCallHandler returns CodeUnimplemented from all methods.
type UnimplementedBaseMsgCallHandler struct{}

func (UnimplementedBaseMsgCallHandler) Add(context.Context, *connect_go.Request[proto_logic.BaseMsg]) (*connect_go.Response[proto_logic.BaseMsg], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto_logic.BaseMsgCall.Add is not implemented"))
}
